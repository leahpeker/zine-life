# Steps to Add New Element Categories to Zine Editor

This document outlines the complete process for adding a new element category to the zine editor, based on the implementation of the Stamp element system.

## 1. Create the Element Store (Required)

Create a new store file in `src/lib/stores/` following the pattern:
- `{elementName}Store.ts` (e.g., `stampStore.ts`)

Required components:
- **Element Type Constants**: Define subtypes for your element category
- **Element Interface**: Define the TypeScript interface for your element
- **Default Properties**: Set default properties for new elements
- **Store Functions**: Create, update, delete operations
- **Element Registry Integration**: Register all subtypes with the element registry
- **Registration Code**: Add elementRegistry.register() calls for each subtype at the bottom of the store file

Example structure:
```typescript
export const {ElementName}Types = {
  Subtype1: 'subtype1_value',
  Subtype2: 'subtype2_value'
} as const;

export interface User{ElementName} {
  id: string;
  type: string;
  subType: string;
  x: number;
  y: number;
  // ... other properties
  pageId?: string;
}

// Store creation and functions
function create{ElementName}Store() {
  // ... store implementation
}

export const {elementName}Elements = create{ElementName}Store();
```

## 2. Update Element Registry (Required)

File: `src/lib/core/elementRegistry.ts`

Add to:
- **ElementTypes**: Add your element type constant
- **ElementCategories**: Add your element category constant
- **Register Elements**: Register all subtypes in the registry with their definitions

Example:
```typescript
export const ElementTypes = {
  // ... existing types
  {ElementName}: '{element_name}'
} as const;

export const ElementCategories = {
  // ... existing categories
  {ElementName}s: '{element_name}s'
} as const;

// Register all subtypes in the registry initialization
```

## 3. Update Page Store (Required)

File: `src/lib/stores/pageStore.ts`

Add to:
- **ZinePage Interface**: Add array property for your elements
- **Import Statement**: Import your element type
- **Default Page Creation**: Initialize empty array in `createDefaultPage()`
- **Element Management Functions**: Update `addElementToCurrentPage()` to handle your category
- **Page Element Updates**: Update `updateCurrentPageElements()` to include your elements

Example:
```typescript
import type { User{ElementName} } from './{elementName}Store';

export interface ZinePage {
  // ... existing properties
  {elementName}s: User{ElementName}[];
}

// Update functions to handle new element type
```

## 4. Update Element Creation Pipeline (Required)

File: `src/lib/utils/elementHelpers.ts`

Add to:
- **Import Statement**: Import your element store
- **addElement Function**: Add handling for your element type in the main creation function
- **updateElementPosition Function**: Add position update handling for your elements
- **removeAllElements Function**: Add cleanup for your element store

Example:
```typescript
import { {elementName}Elements } from '../stores/{elementName}Store';

// In addElement function:
} else if (type === ElementTypes.{ElementName}) {
  {elementName}Elements.update(current => [...current, baseElement as any]);
  zineStore.addElementToCurrentPage(ElementCategories.{ElementName}s, baseElement as any);
}

// In updateElementPosition function:
{elementName}Elements.update(current => 
  current.map(element => 
    element.id === id ? { ...element, x, y } : element
  )
);
```

## 5. Update Element Management Helpers (Required)

File: `src/lib/helpers/elementManagementHelpers.ts`

Add to:
- **Import Statement**: Import your element store and type
- **handleElementSelected Function**: Add your element type to the registry search
- **handleUpdateElement Function**: Add update handling for your elements (if needed)

Example:
```typescript
import { {elementName}Elements, type User{ElementName} } from '../stores/{elementName}Store';

// In handleElementSelected, update the registry search:
const elementDef = elementRegistry.get(ElementTypes.Shape, elementSubType) ||
                   // ... existing searches
                   elementRegistry.get(ElementTypes.{ElementName}, elementSubType);
```

## 6. Update Multi-Page Canvas (Required)

File: `src/lib/components/pages/MultiPageCanvas.svelte`

Add to:
- **Import Statements**: Import your element store and type
- **getElementsForPage Function**: Add filtering for your elements by pageId
- **CanvasContainer Props**: Pass your filtered elements to CanvasContainer

Example:
```typescript
import type { User{ElementName} } from '../../stores/{elementName}Store';
import { {elementName}Elements as {elementName}ElementsStore } from '../../stores/{elementName}Store';

// In getElementsForPage function:
return {
  // ... existing elements
  {elementName}s: ${elementName}ElementsStore.filter(element => element.pageId === pageId)
};

// In CanvasContainer props:
{elementName}s={pageElements.{elementName}s}
```

## 7. Create Element Renderer Component (Optional but Recommended)

For complex visual elements (like stamps with backgrounds + text), create a dedicated renderer:

File: `src/lib/components/canvas/{ElementName}Renderer.svelte`

Example for stamps:
```svelte
<script>
  import { Group, Rect, Circle, Text } from 'svelte-konva';
  
  let { elements, selectedId, onElementClick } = $props();
</script>

{#each elements as element (element.id)}
  <Group
    x={element.x}
    y={element.y}
    id={element.id}
    name="transformable"
    draggable={true}
    onclick={(e) => {
      e.cancelBubble = true;
      onElementClick(element.id);
    }}
  >
    <!-- Background shape -->
    <Rect width={element.width} height={element.height} />
    <!-- Text overlay -->
    <Text text={element.text} />
  </Group>
{/each}
```

## 8. Update Canvas Container (Required)

File: `src/lib/components/canvas/CanvasContainer.svelte`

Add to:
- **Import Statements**: Import your element store and renderer component
- **Props Interface**: Add your elements array to the Props interface
- **Props Destructuring**: Add your elements to the destructured props
- **Transform Handling**: Add transform update handling for your elements
- **Rendering**: Add rendering using your renderer component or individual Konva components

Example:
```typescript
import type { User{ElementName} } from '$lib/stores/{elementName}Store';
import { {elementName}Elements as {elementName}ElementsStore } from '$lib/stores/{elementName}Store';
import {ElementName}Renderer from './{ElementName}Renderer.svelte';

interface Props {
  // ... existing props
  {elementName}s: User{ElementName}[];
}

// Add to handleTransformEnd function:
{elementName}ElementsStore.update(currentElements => {
  return currentElements.map(element => {
    if (element.id === id) {
      return { ...element, x, y, scaleX, scaleY, rotation };
    }
    return element;
  });
});

// Add rendering in Layer:
<{ElementName}Renderer
  elements={{elementName}s}
  {selectedId}
  onElementClick={onElementClick}
/>
```

**Important for Transformer compatibility:**
- Use `name="transformable"` on Group elements
- Ensure Groups have proper `id` attributes
- Handle click events with `e.cancelBubble = true`

## 9. Create Element Icons (Optional but Recommended)

Create icon components in `src/lib/components/icons/` for your element subtypes to use in the sidebar.

## 10. Update Sidebar (If Creating UI Elements)

If your elements should appear in the sidebar for user selection, update the sidebar components to include your new element category.

## 11. Import Store to Trigger Registration (Required)

File: `src/routes/editor/+page.svelte` (or main app entry point)

Add to:
- **Import Statement**: Import your element store to trigger the registration code execution

Example:
```typescript
import { {elementName}Elements, type User{ElementName} } from '../../lib/stores/{elementName}Store';
```

**Important**: The store must be imported somewhere in the application for the registration code to execute. The editor page is typically the best place since it's where the element system is used.

## Summary Checklist

For any new element category, ensure you:

- [ ] Create element store with types, interface, and functions
- [ ] Add elementRegistry.register() calls for each subtype in the store
- [ ] Import the store in editor/+page.svelte to trigger registration
- [ ] Register element type and category in element registry
- [ ] Update page store interface and functions
- [ ] Update element creation pipeline (elementHelpers.ts)
- [ ] Update element management helpers
- [ ] Update MultiPageCanvas to filter and pass elements
- [ ] Create dedicated renderer component for complex visual elements (optional)
- [ ] Update CanvasContainer to accept and render elements
- [ ] Add transform/interaction handling with proper Group setup
- [ ] Test element creation, positioning, transformation, and persistence across pages

## Notes

- **Element IDs**: Always use `crypto.randomUUID()` for unique element IDs
- **Page Association**: Always include `pageId` for multi-page support
- **Transform Support**: Include scaleX, scaleY, rotation properties for Konva transformer
- **Store Updates**: Use immutable update patterns with Svelte stores
- **Type Safety**: Maintain TypeScript interfaces for all element properties

This pattern ensures consistent element handling across the entire application and maintains compatibility with the multi-page system, history tracking, and element transformation features.